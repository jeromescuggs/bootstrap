#!/bin/bash

# fancy method to store the absolute path of this script. will come in handy throughout the bootstrap
JRM_DIR=$(dirname $(readlink -f $0))

# we begin...
echo "initializing script..."
sleep 1
echo "script started from $JRM_DIR"
sleep 1
echo "checking for dependencies..."
sleep 2
# real skeezy way to make sure this script is in proper directory
# will still break if, for some reason, env/lib_list.txt is missing!
if [[ ! -f $JRM_DIR/env/pkg_list.txt ]]; then 
		echo "script cannot find ./env/pkg_list.txt! exiting..." 
		echo "make sure ./init is run from the base of the git repository."
		exit
else 
		echo "found /env folder with package list! let's continue..."
fi 

# git dir - allow user to set custom download path for any downloaded repos
echo "By default, the script will create a directory in $HOME called 'gits'."
sleep 1
echo "You can enter a different directory name below, or press [Enter] to use defaults." 
echo "WARNING: You cannot change the root path - it will always be created in your home directory!" 
echo "[Enter] or custom dir name:"
read JRM_GIT_VAR

# Check if user set custom dir - if not use default
if [[ -z $JRM_GIT_VAR ]]; then
    JRM_GIT_DIR=$HOME/gits
else 
		JRM_GIT_DIR=$HOME/$JRM_GIT_VAR
fi 
# One last heads-up before we begin 
echo "Git directory set to $JRM_GIT_DIR. Any git repositories which may be downloaded over the course of this bootstrap will be saved to this directory."
sleep 1
# collect the rest of the information needed later

# check for cpu arch - cargo-bay will support x86_64 and aarch64, and some armv7l though not as completely
JRM_ARCH=$(uname -m)

echo -n "

 ██████╗  ███████╗  ██████╗  █████╗  ██╗   ██╗ ███████╗ ███████╗
 ██╔══██╗ ██╔════╝ ██╔════╝ ██╔══██╗ ██║   ██║ ██╔════╝ ██╔════╝
 ██████╔╝ █████╗   ██║      ███████║ ██║   ██║ ███████╗ █████╗
 ██╔══██╗ ██╔══╝   ██║      ██╔══██║ ██║   ██║ ╚════██║ ██╔══╝
 ██████╔╝ ███████╗ ╚██████╗ ██║  ██║ ╚██████╔╝ ███████║ ███████╗
 ╚═════╝  ╚══════╝  ╚═════╝ ╚═╝  ╚═╝  ╚═════╝  ╚══════╝ ╚══════╝"

 echo -n "
 
 ████████╗ ██╗  ██╗ ███████╗     ███╗   ██╗ ███████╗ ████████╗
 ╚══██╔══╝ ██║  ██║ ██╔════╝     ████╗  ██║ ██╔════╝ ╚══██╔══╝
    ██║    ███████║ █████╗       ██╔██╗ ██║ █████╗      ██║
    ██║    ██╔══██║ ██╔══╝       ██║╚██╗██║ ██╔══╝      ██║
    ██║    ██║  ██║ ███████╗ ██╗ ██║ ╚████║ ███████╗    ██║
    ╚═╝    ╚═╝  ╚═╝ ╚══════╝ ╚═╝ ╚═╝  ╚═══╝ ╚══════╝    ╚═╝"
echo " "
sleep 1
clear
echo "alright, let's proceed."
sleep 1
echo "--------------------------------------- "
echo "     █         █                 █  █   "
echo "     █                    █      █  █   "
echo " ███ █ █ ███   █ ███ ███ ███ ███ █  █   "
echo " █ █ ██  █ █   █ █ █ █    █    █ █  █   "
echo " █ █ ██  █ █   █ █ █   █  █  ███ █  █   "
echo " ███ █ █ ███   █ █ █ ███  ██ ███ ██ ██  "
echo " █         █                            "
echo " █       ███   update & install         "
echo "--------------------------------------- "
sleep 1
echo "j k j k j k"
sleep 1
echo "test icles"
sleep 1
echo "VARIABLES OUTPUT"
echo "================"
echo "JRM_DIR: $JRM_DIR"
echo "JRM_GIT_DIR: $JRM_GIT_DIR"
echo "JRM_GIT_VAR: $JRM_GIT_VAR"
echo "JRM_ARCH: $JRM_ARCH"
