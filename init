#!/bin/bash

JRM_INIT=$1

if [[ ! $JRM_INIT == "init" ]]; then
    echo -n "
    +---------------------------------------+
    | to run the bootstrapper, please       |
    | re-run this with the 'init' argument! |
    | e.g. \"./bootstrap init\"             |
    +---------------------------------------+
    "
    exit
    else 
sleep 1
fi 

# fancy method to store the absolute path of this script. will come in handy throughout the bootstrap
JRM_DIR=$(dirname $(readlink -f $0))

# we begin...
echo "initializing... script started from $JRM_DIR"
sleep 1
echo "checking for dependencies..."
sleep 2
# real skeezy way to make sure this script is in proper directory
# will still break if, for some reason, env/lib_list.txt is missing!
if [[ ! -f $JRM_DIR/env/pkg_list.txt ]]; then 
		echo "script cannot find ./env/pkg_list.txt! exiting..." 
		echo "make sure ./init is run from the base of the git repository."
		exit
else 
		echo "found /env folder with package list! let's continue..."
fi 
sleep 1

# git dir - allow user to set custom download path for any downloaded repos
echo -n "+--------------------------------------+
| configure your homedir git directory |
+--------------------------------------+
"
sleep 2
echo "By default, the script will create a directory in $HOME called 'gits'."
echo "During this bootstrap, some repositories will be downloaded to this directory before installation, e.g. node version manager, ls++, etc"
sleep 2
echo "You can enter a different directory name below, or press [Enter] to use defaults." 
echo "WARNING: You cannot change the root path - it will always be created in your home directory!" 
echo "[Enter] or custom dir name:"
read JRM_GIT_VAR

# Check if user set custom dir - if not use default
if [[ -z $JRM_GIT_VAR ]]; then
    JRM_GIT_DIR=$HOME/gits
else 
	JRM_GIT_DIR=$HOME/$JRM_GIT_VAR
fi 
# One last heads-up before we begin 
echo "Git directory set to $JRM_GIT_DIR. Any git repositories which may be downloaded over the course of this bootstrap will be saved to this directory."
sleep 1
# collect the rest of the information needed later

# check for cpu arch - cargo-bay will support x86_64 and aarch64, and some armv7l though not as completely
JRM_ARCH=$(uname -m)

echo -n "

 ██████╗  ███████╗  ██████╗  █████╗  ██╗   ██╗ ███████╗ ███████╗
 ██╔══██╗ ██╔════╝ ██╔════╝ ██╔══██╗ ██║   ██║ ██╔════╝ ██╔════╝
 ██████╔╝ █████╗   ██║      ███████║ ██║   ██║ ███████╗ █████╗
 ██╔══██╗ ██╔══╝   ██║      ██╔══██║ ██║   ██║ ╚════██║ ██╔══╝
 ██████╔╝ ███████╗ ╚██████╗ ██║  ██║ ╚██████╔╝ ███████║ ███████╗
 ╚═════╝  ╚══════╝  ╚═════╝ ╚═╝  ╚═╝  ╚═════╝  ╚══════╝ ╚══════╝"

 echo -n "
 
 ████████╗ ██╗  ██╗ ███████╗     ███╗   ██╗ ███████╗ ████████╗
 ╚══██╔══╝ ██║  ██║ ██╔════╝     ████╗  ██║ ██╔════╝ ╚══██╔══╝
    ██║    ███████║ █████╗       ██╔██╗ ██║ █████╗      ██║
    ██║    ██╔══██║ ██╔══╝       ██║╚██╗██║ ██╔══╝      ██║
    ██║    ██║  ██║ ███████╗ ██╗ ██║ ╚████║ ███████╗    ██║
    ╚═╝    ╚═╝  ╚═╝ ╚══════╝ ╚═╝ ╚═╝  ╚═══╝ ╚══════╝    ╚═╝"
echo " "
sleep 1
clear
echo "alright, let's proceed."
sleep 1
echo "--------------------------------------- "
echo "     █         █                 █  █   "
echo "     █                    █      █  █   "
echo " ███ █ █ ███   █ ███ ███ ███ ███ █  █   "
echo " █ █ ██  █ █   █ █ █ █    █    █ █  █   "
echo " █ █ ██  █ █   █ █ █   █  █  ███ █  █   "
echo " ███ █ █ ███   █ █ █ ███  ██ ███ ██ ██  "
echo " █         █                            "
echo " █       ███   update & install         "
echo "--------------------------------------- "
sleep 2
echo "Running apt update & upgrade before beginning..."
sleep 1
sudo apt update && sudo apt upgrade -y
sleep 3
echo "installing Zshell, git, vim, and basic CLI file handling tools (pkg-config, dialog, etc)"
sudo apt install -y zsh expect git curl wget vim dialog dpkg pkg-config htop pinentry-tty  
sleep 1
echo "installing important libraries..."
sudo xargs -a env/lib_list.txt apt install -y
sleep 1 
echo "installing useful packages..."
sudo xargs -a env/pkg_list.txt apt install -y
sleep 1
echo " "
echo "packages installed!"

echo "setting up dev environment..."
sleep 3

echo "installing Golang to /usr/local/go..."

# go binaries for x86, arm64, arm7
JRM_GO_LINUX=go1.14.6.linux-amd64.tar.gz
JRM_GO_ARM64=go1.14.6.linux-arm64.tar.gz
JRM_GO_ARM7=

# determine computer cpu arch and grab correct binary
if [[ $JRM_ARCH == "aarch64" ]]; then
    cd $JRM_DIR && wget https://golang.org/dl/$JRM_GO_ARM64
fi

if [[ $JRM_ARCH == "x86_64" ]]; then
    cd $JRM_DIR && wget https://golang.org/dl/$JRM_GO_LINUX 
fi 

# unzip to /go and install
tar -xvf $JRM_GO
sudo mv $JRM_DIR/go /usr/local
echo "creating binary and source Go directory in $HOME..."
mkdir -p $HOME/go
echo "Golang has been installed!" 
sleep 1
echo "installing nodejs version manager in /usr/local/..."
sleep 1
echo "creating $HOME/gits and downloading n build files..."
mkdir -p $JRM_DIR_GIT && cd $JRM_DIR_GIT
git clone https://github.com/tj/n $JRM_DIR_GIT/n
echo "building & installing..."
cd $JRM_DIR_GIT/n
sudo chown -R $USER /usr/local/
make
sudo make install
sleep 1
echo "done! remember to install npm with e.g. 'n lts', 'n latest' etc"
sleep 3
echo "installing Rustup version manager & cargo..."
curl sh.rustup.rs -sSf | sh -s -- -y
sleep 1
echo "Rust binaries and Cargo have been installed to $HOME/cargo!"
echo "Manage Rust versions by running rustup"
sleep 1
echo "installing rbenv to manage Ruby..."
# setup rbenv, and cross fingers
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer | bash
echo "rbenv has been installed to $HOME/.rbenv"
sleep 1
echo "verifying installation..."
# verify rbenv 
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
echo "remember to first run 'rbenv install [version]' and then set it as default with"
echo "rbenv global [version]"
echo "TIP: if building ruby on a machine with less than 1gb ram, manually set"
echo "a temp directory to build from e.g."
echo "TMPDIR=~/ rbenv install 2.7.0"
echo "
  _______ __       __       __             __ __
 |   _   |__.-----|__.-----|  |--.-----.--|  |  |
 |.  1___|  |     |  |__ --|     |  -__|  _  |__|
 |.  __) |__|__|__|__|_____|__|__|_____|_____|__|
 |:  | bootrap complete - happy coding!
 |::.|        scuggscorp inc. 
 \`---'                https://ha.zardo.us
"







